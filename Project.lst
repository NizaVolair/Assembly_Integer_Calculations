Microsoft (R) Macro Assembler Version 12.00.31101.0	    11/21/15 19:00:07
2Program Assignment 5      (NizaVolairProject5.asm	     Page 1 - 1


				TITLE Program Assignment 5      (NizaVolairProject5.asm)

				; Name: Niza Volair
				; OSU email: volairn@oregonstate.edu
				; Class number & section: CS271 - 400
				; Assignment number: 5
				; Assignment due date: 11 - 22 - 15
				; Description: Program to generate an array of random numbers, sort them, print them and find the median

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; upper and lower limits for input range checking of input and randomly generated numbers
				; min, max, lo, and hi must be declared and used as global constants.
 = 0000000A			MIN = 10
 = 000000C8			MAX = 200
 = 00000064			LO = 100
 = 000003E7			HI = 999

 00000000			.data

 00000000 53 6F 72 74 69	intro		BYTE	"Sorting Random Integers Programmed by Niza Volair", 0ah, 0dh, 0ah, 0dh
	   6E 67 20 52 61
	   6E 64 6F 6D 20
	   49 6E 74 65 67
	   65 72 73 20 50
	   72 6F 67 72 61
	   6D 6D 65 64 20
	   62 79 20 4E 69
	   7A 61 20 56 6F
	   6C 61 69 72 0A
	   0D 0A 0D
 00000035  54 68 69 73 20				BYTE 	"This program generates random numbers in the range[100 .. 999],", 0ah, 0dh
	   70 72 6F 67 72
	   61 6D 20 67 65
	   6E 65 72 61 74
	   65 73 20 72 61
	   6E 64 6F 6D 20
	   6E 75 6D 62 65
	   72 73 20 69 6E
	   20 74 68 65 20
	   72 61 6E 67 65
	   5B 31 30 30 20
	   2E 2E 20 39 39
	   39 5D 2C 0A 0D
 00000076  64 69 73 70 6C				BYTE	"displays the original list, sorts the list, and calculates the median value.", 0ah, 0dh
	   61 79 73 20 74
	   68 65 20 6F 72
	   69 67 69 6E 61
	   6C 20 6C 69 73
	   74 2C 20 73 6F
	   72 74 73 20 74
	   68 65 20 6C 69
	   73 74 2C 20 61
	   6E 64 20 63 61
	   6C 63 75 6C 61
	   74 65 73 20 74
	   68 65 20 6D 65
	   64 69 61 6E 20
	   76 61 6C 75 65
	   2E 0A 0D
 000000C4  46 69 6E 61 6C				BYTE	"Finally, it displays the list sorted in descending order.", 0ah, 0dh, 0ah, 0dh
	   6C 79 2C 20 69
	   74 20 64 69 73
	   70 6C 61 79 73
	   20 74 68 65 20
	   6C 69 73 74 20
	   73 6F 72 74 65
	   64 20 69 6E 20
	   64 65 73 63 65
	   6E 64 69 6E 67
	   20 6F 72 64 65
	   72 2E 0A 0D 0A
	   0D
 00000101  2A 2A 45 43 3A				BYTE	"**EC: OTher- not sure if this is extra credit but all strings are passed on stack",0
	   20 4F 54 68 65
	   72 2D 20 6E 6F
	   74 20 73 75 72
	   65 20 69 66 20
	   74 68 69 73 20
	   69 73 20 65 78
	   74 72 61 20 63
	   72 65 64 69 74
	   20 62 75 74 20
	   61 6C 6C 20 73
	   74 72 69 6E 67
	   73 20 61 72 65
	   20 70 61 73 73
	   65 64 20 6F 6E
	   20 73 74 61 63
	   6B 00

 00000153 48 6F 77 20 6D	inst		BYTE	"How many numbers should be generated ? [10 .. 200]: ", 0
	   61 6E 79 20 6E
	   75 6D 62 65 72
	   73 20 73 68 6F
	   75 6C 64 20 62
	   65 20 67 65 6E
	   65 72 61 74 65
	   64 20 3F 20 5B
	   31 30 20 2E 2E
	   20 32 30 30 5D
	   3A 20 00

 00000188 49 6E 76 61 6C	error		BYTE	"Invalid input", 0
	   69 64 20 69 6E
	   70 75 74 00

 00000196 54 68 65 20 75	title1		BYTE	"The unsorted random numbers: ", 0
	   6E 73 6F 72 74
	   65 64 20 72 61
	   6E 64 6F 6D 20
	   6E 75 6D 62 65
	   72 73 3A 20 00

 000001B4 54 68 65 20 6D	median		BYTE	"The median number: ", 0
	   65 64 69 61 6E
	   20 6E 75 6D 62
	   65 72 3A 20 00

 000001C8 54 68 65 20 73	title2		BYTE	"The sorted list: ", 0
	   6F 72 74 65 64
	   20 6C 69 73 74
	   3A 20 00

 000001DA 20 20 20 00		spaces		BYTE	"   ", 0

 000001DE 00000000		request		DWORD	?

 000001E2  000000C8 [		numArray	DWORD	MAX DUP(? )
	    00000000
	   ]

 00000502 00000000		curCol		DWORD	0

 00000000			.code
 00000000			main PROC

				; 1. Introduce the program.The title, programmer's name, and brief instructions must be displayed on the screen.
 00000000  68 00000000 R		push	OFFSET intro
 00000005  E8 00000095			call	introduction

				; 2. Get a user request in the range[min = 10 ..max = 200].The program must validate the user’s request.
 0000000A  68 00000153 R		push	OFFSET inst
 0000000F  68 00000188 R		push	OFFSET error
 00000014  68 000001DE R		push	OFFSET request
 00000019  E8 0000009A			call	getData					; { parameters: request(reference)}

					; Test Code for request
						;mov	eax, request
						;call	WriteDec
						;call	Crlf

				; 3. Generate request random integers in the range[lo = 100 ..hi = 999], storing them in consecutive elements of an array.
 0000001E  E8 00000000 E		call	randomize	

 00000023  68 000001E2 R		push	OFFSET numArray
 00000028  FF 35 000001DE R		push	request
 0000002E  E8 000000C0			call	fillArray				; fill array {parameters: request(value), array(reference)}


				; 4. Display the list of integers before sorting, 10 numbers per line.
						; display list{ parameters: array(reference), request(value), title(reference) }
 00000033  68 00000196 R			push	OFFSET title1
 00000038  FF 35 00000502 R			push	curCol
 0000003E  68 000001DA R			push	OFFSET spaces
 00000043  68 000001E2 R			push	OFFSET numArray
 00000048  FF 35 000001DE R			push	request

 0000004E  E8 000000C5				call	showArray

					; Test Code for display
						; mov	edi, OFFSET numArray
						; mov	ecx, request

 00000053					testPrint :
							;mov	eax, [edi]
							;call	WriteDec
							;call	Crlf
							;add	edi, 4

							;loop	testPrint
									
				; 5. Sort the list in descending order(i.e., largest first).
					; sort list{ parameters: array(reference), request(value) }
 00000053  68 000001E2 R		push	OFFSET numArray
 00000058  FF 35 000001DE R		push	request
 0000005E  E8 00000102			call	sortArray
					
				; 6. Calculate and display the median value, rounded to the nearest integer.
					; display median{ parameters: array(reference), request(value) }
 00000063  68 000001B4 R		push	OFFSET median
 00000068  68 000001E2 R		push	OFFSET numArray
 0000006D  FF 35 000001DE R		push	request
 00000073  E8 00000110			call	getMedian

				; 7. Display the sorted list, 10 numbers per line.
					; display list again{ parameters: array(reference), request(value), title(reference) }
 00000078  68 000001C8 R		push	OFFSET title2
 0000007D  FF 35 00000502 R		push	curCol
 00000083  68 000001DA R		push	OFFSET spaces
 00000088  68 000001E2 R		push	OFFSET numArray
 0000008D  FF 35 000001DE R		push	request

 00000093  E8 00000080			call	showArray
				 

				exit; exit to operating system
 00000098  6A 00	   *	    push   +000000000h
 0000009A  E8 00000000 E   *	    call   ExitProcess
 0000009F			main ENDP

				; Procedure to display introduction of program
				; receives: intro(ref)
				; returns: displays intro to screen
				; preconditions: intro is initialized
				; registers changed: edx, ebp, esp
 0000009F			introduction	PROC

				; set up stackframe
 0000009F  55				push	ebp
 000000A0  8B EC			mov		ebp, esp

				; introduce the program	
 000000A2  8B 55 08			mov		edx, [ebp + 8]
 000000A5  E8 00000000 E		call	WriteString
 000000AA  E8 00000000 E		call	Crlf
 000000AF  E8 00000000 E		call	Crlf

 000000B4  5D				pop		ebp
 000000B5  C2 0004			ret 4

 000000B8			introduction	ENDP


				; Procedure to get user input and validates input
				; receives: address of num and offset of inst and error pushed on stack, MAX and MIN are global
				; returns: instructions printed to screen and valid integer in num
				; preconditions:  inst, error are initialized and num is pushed on stack
				; registers changed: eax, edx, ebx, ebp
 000000B8			getData	PROC

				; set up stackframe
 000000B8  55				push	ebp
 000000B9  8B EC			mov		ebp, esp

 000000BB			getNum:								; prompt for and get integer and put in num variable
 000000BB  8B 55 10			mov		edx, [ebp + 16]
 000000BE  E8 00000000 E		call	WriteString
 000000C3  E8 00000000 E		call	ReadInt

				; validate input by comparing integer to MAX and MIN limits
 000000C8  3D 000000C8			cmp		eax, MAX				; if greater than upper limit jump to error message and reprompt
 000000CD  7F 0C			jg		rangeError

 000000CF  83 F8 0A			cmp		eax, MIN				; if lower than lower limit jump to error message and reprompt
 000000D2  7C 07			jl		rangeError

 000000D4  E8 00000000 E		call	Crlf
 000000D9  EB 0F			jmp		valid					; procedure should skip over rangeError unless there is an issue


 000000DB				rangeError :
 000000DB  8B 55 0C				mov		edx, [ebp + 12]
 000000DE  E8 00000000 E			call	WriteString
 000000E3  E8 00000000 E			call	Crlf
 000000E8  EB D1				jmp		getNum				; user should be prompted to re-enter the number

 000000EA			valid:								; input was valid so put it in the address of the num variable on the stack and return
 000000EA  8B 5D 08			mov		ebx, [ebp + 8]
 000000ED  89 03			mov		[ebx], eax

 000000EF  5D				pop ebp
 000000F0  C2 000C			ret 12

 000000F3			getData	ENDP

				; Procedure to fill an array with random numbers
				; receives: value of request pushed onstack, offset of array pushed on stack
				; returns: an array of the amount of requested random numbers
				; preconditions:  array and request are initialized
				; registers changed: eax, edx, ebc, ecx, edi
 000000F3			fillArray	PROC

				; set up stackframe
 000000F3  55				push	ebp
 000000F4  8B EC			mov		ebp, esp

				; put the request(count) in ecx and the starting address of the array in the edi
 000000F6  8B 4D 08			mov		ecx, [ebp + 8]			
 000000F9  8B 7D 0C			mov		edi, [ebp + 12]			
					
 000000FC			addRandomNumToArray:				;gets the amount of random numbers requested in the eax and add each to the array 
 000000FC  B8 000003E7			mov		eax,HI
 00000101  83 E8 64			sub		eax,LO
 00000104  40				inc		eax
 00000105  E8 00000000 E		call	RandomRange
 0000010A  83 C0 64			add		eax, LO

 0000010D  89 07			mov		[edi], eax
 0000010F  83 C7 04			add		edi, 4

 00000112  E2 E8			loop	addRandomNumToArray

 00000114  5D				pop ebp
 00000115  C2 0008			ret 8

 00000118			fillArray	ENDP

				; Procedure to display numbers aligned in lines and rows
				; receives: title(ref), current column(val), spaces(ref), array(ref), request(val)
				; returns: a title and up to 200 numbers aligned in lines and rows
				; preconditions: title, curCol, spaces, array, and count are initialized
				; registers changed : eax, ecx, edx, ebx, ebp, esi
 00000118			showArray	PROC

				; set up stackframe
 00000118  55				push	ebp
 00000119  8B EC			mov		ebp, esp

				; display title
 0000011B  8B 55 18			mov		edx, [ebp + 24]
 0000011E  E8 00000000 E		call	WriteString
 00000123  E8 00000000 E		call	Crlf

				; put the request(count) in ecx and the starting address of the array in the edi
 00000128  8B 4D 08			mov		ecx, [ebp + 8]
 0000012B  8B 75 0C			mov		esi, [ebp + 12]
 0000012E  8B 5D 14			mov		ebx, [ebp + 20]

 00000131			print:									
 00000131  8B 06			mov		eax, [esi]
 00000133  E8 00000000 E		call	writeDec

 00000138  8B 55 10			mov		edx, [ebp + 16]
 0000013B  E8 00000000 E		call	WriteString					; print spaces

 00000140  83 C6 04			add		esi, 4	
					
					; check if row needs to be increased
 00000143  43					inc		ebx						; The results should be displayed 10 composites per line
 00000144  83 FB 0A				cmp		ebx, 10					; check if new row is needed
 00000147  74 02				je		newRow					; make new row if needed
 00000149  7C 0A				jl		loopAgain
							
 0000014B					newRow :						; rows and columns for display
 0000014B  E8 00000000 E			call	Crlf
 00000150  BB 00000000				mov		ebx, 0

 00000155				loopAgain :							; loop back to print another composite
 00000155  E2 DA			loop	print						

 00000157  E8 00000000 E		call	Crlf
 0000015C  E8 00000000 E		call	Crlf

 00000161  5D				pop		ebp
 00000162  C2 0014			ret		20

 00000165			showArray	ENDP


				; Procedure to sort an array in decending order (source: IRVINE 375)
				; receives: array(ref), request(val)
				; returns: sorts up to 200 numbers in decending order in an array
				; preconditions: array, and request are initialized
				; registers changed : eax, ecx, edx, ebx, ebp, esi
 00000165			sortArray	PROC

				; set up stackframe
 00000165  55				push	ebp
 00000166  8B EC			mov		ebp, esp
					
 00000168  8B 4D 08			mov		ecx, [ebp + 8]
 0000016B  49				dec		ecx

 0000016C			L1:										; outter loop saves the count and gets the first value for comparison
 0000016C  51				push	ecx
 0000016D  8B 75 0C			mov		esi, [ebp+12]
					
 00000170			L2:										; inner loop compares current value to following values and exchanges if needed
 00000170  8B 06			mov		eax, [esi]
 00000172  39 46 04			cmp		[esi + 4], eax
 00000175  7C 05			jl		L3
 00000177  87 46 04			xchg	eax, [esi+4]
 0000017A  89 06			mov		[esi], eax

 0000017C			L3:										; continues the inner loop through all following unsorted values, when finished jumps to outer loop to check next value
 0000017C  83 C6 04			add		esi, 4
 0000017F  E2 EF			loop	L2

 00000181  59				pop		ecx
 00000182  E2 E8			loop	L1

 00000184  5D				pop ebp
 00000185  C2 0008			ret 8

 00000188			sortArray	ENDP


				; Procedure to show the median value in a sorted array
				; receives: median display string(ref), array(ref), request(val)
				; returns: prints a label and median value
				; preconditions: median display, array, and request are initialized
				; registers changed : eax, ecx, edx, ebx, ebp, esi
 00000188			getMedian	PROC

				; set up stackframe and put offset of array in esi
 00000188  55				push	ebp
 00000189  8B EC			mov		ebp, esp

 0000018B  8B 75 0C			mov		esi, [ebp + 12]

				; display title
 0000018E  8B 55 10			mov		edx, [ebp + 16]
 00000191  E8 00000000 E		call	WriteString

				; divide request and 2 
 00000196  BA 00000000			mov		edx, 0
 0000019B  8B 45 08			mov		eax, [ebp + 8]
 0000019E  BB 00000002			mov		ebx, 2
 000001A3  F7 F3			div		ebx

					;Test code to display registers and check median calculation
						;call	WriteDec
						;call	Crlf
						;mov		ebx, eax

						;mov		eax, edx
						;call	WriteDec
						;call	Crlf
						
						;mov		eax, ebx

 000001A5  83 FA 01			cmp		edx, 1						; if edx has 1 the number is odd if not, it is even so jump to the correct calculations
 000001A8  74 02			je		oddRequest
 000001AA  EB 16			jmp		EvenRequest

 000001AC			OddRequest:								; if the request is odd then get the value at the location of request/2 (the middle) and print
 000001AC  8B 1C 86			mov		ebx, [esi + eax * 4]		; this moves in the address and the next line dereferences it
 000001AF  8B C3			mov		eax, ebx
 000001B1  E8 00000000 E		call	WriteDec
 000001B6  E8 00000000 E		call	Crlf
 000001BB  E8 00000000 E		call	Crlf

 000001C0  EB 28			jmp		Finish

 000001C2			EvenRequest:							; if the request is even, get the value before request/2 and the value at request/2
 000001C2  8B 1C 86			mov		ebx, [esi + eax * 4]
 000001C5  8B D3			mov		edx, ebx
 000001C7  48				dec		eax
 000001C8  8B 1C 86			mov		ebx, [esi + eax * 4]
 000001CB  03 D3			add		edx, ebx
 000001CD  8B C2			mov		eax, edx
					;Test code to check calculations
						;call	WriteDec
						;call	Crlf
 000001CF  BA 00000000			mov		edx, 0
 000001D4  BB 00000002			mov		ebx, 2						; now divide the total by 2 to get the average which is the median
 000001D9  F7 F3			div		ebx
 000001DB  E8 00000000 E		call	WriteDec
 000001E0  E8 00000000 E		call	Crlf
 000001E5  E8 00000000 E		call	Crlf

 000001EA			Finish:
 000001EA  5D				pop ebp
 000001EB  C2 000C			ret 12

 000001EE			getMedian	ENDP


				END main
Microsoft (R) Macro Assembler Version 12.00.31101.0	    11/21/15 19:00:07
2Program Assignment 5      (NizaVolairProject5.asm	     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000506 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000001EE Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
fillArray  . . . . . . . . . . .	P Near	 000000F3 _TEXT	Length= 00000025 Public STDCALL
  addRandomNumToArray  . . . . .	L Near	 000000FC _TEXT	
getData  . . . . . . . . . . . .	P Near	 000000B8 _TEXT	Length= 0000003B Public STDCALL
  getNum . . . . . . . . . . . .	L Near	 000000BB _TEXT	
  rangeError . . . . . . . . . .	L Near	 000000DB _TEXT	
  valid  . . . . . . . . . . . .	L Near	 000000EA _TEXT	
getMedian  . . . . . . . . . . .	P Near	 00000188 _TEXT	Length= 00000066 Public STDCALL
  OddRequest . . . . . . . . . .	L Near	 000001AC _TEXT	
  EvenRequest  . . . . . . . . .	L Near	 000001C2 _TEXT	
  Finish . . . . . . . . . . . .	L Near	 000001EA _TEXT	
introduction . . . . . . . . . .	P Near	 0000009F _TEXT	Length= 00000019 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000009F Public STDCALL
  testPrint  . . . . . . . . . .	L Near	 00000053 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
showArray  . . . . . . . . . . .	P Near	 00000118 _TEXT	Length= 0000004D Public STDCALL
  print  . . . . . . . . . . . .	L Near	 00000131 _TEXT	
  newRow . . . . . . . . . . . .	L Near	 0000014B _TEXT	
  loopAgain  . . . . . . . . . .	L Near	 00000155 _TEXT	
sortArray  . . . . . . . . . . .	P Near	 00000165 _TEXT	Length= 00000023 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 0000016C _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 00000170 _TEXT	
  L3 . . . . . . . . . . . . . .	L Near	 0000017C _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HI . . . . . . . . . . . . . . .	Number	 000003E7h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LO . . . . . . . . . . . . . . .	Number	 00000064h   
MAX  . . . . . . . . . . . . . .	Number	 000000C8h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MIN  . . . . . . . . . . . . . .	Number	 0000000Ah   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
curCol . . . . . . . . . . . . .	DWord	 00000502 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
error  . . . . . . . . . . . . .	Byte	 00000188 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
inst . . . . . . . . . . . . . .	Byte	 00000153 _DATA	
intro  . . . . . . . . . . . . .	Byte	 00000000 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
median . . . . . . . . . . . . .	Byte	 000001B4 _DATA	
numArray . . . . . . . . . . . .	DWord	 000001E2 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
request  . . . . . . . . . . . .	DWord	 000001DE _DATA	
spaces . . . . . . . . . . . . .	Byte	 000001DA _DATA	
title1 . . . . . . . . . . . . .	Byte	 00000196 _DATA	
title2 . . . . . . . . . . . . .	Byte	 000001C8 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
